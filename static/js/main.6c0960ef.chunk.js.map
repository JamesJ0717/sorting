{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useEffect","useState","sortType","setSortType","num","setNum","renders","renderArray","tempArray","index","bar","height","Math","floor","random","width","push","quickSort","useCallback","array","left","right","length","pivot","i","j","partition","inputArr","len","tmp","bubbleSort","key","insertionSort","sort","a","b","className","href","onClick","onSubmit","event","preventDefault","htmlFor","type","name","id","step","value","onChange","parseInt","target","min","max","map","style","Bar","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c0960ef.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n\ntype BarProps = {\n  height: number;\n  width: number;\n  index: number;\n};\n\nfunction App() {\n  useEffect(() => {});\n\n  const [sortType, setSortType] = useState(\"None\");\n  const [num, setNum] = useState(25);\n  let renders = 0;\n\n  let renderArray: BarProps[] = [];\n  let tempArray: BarProps[] = [];\n\n  for (let index = 0; index < num; index++) {\n    let height = Math.floor(Math.random() * 80) + 1;\n    let width = num / 12;\n    let bar = {\n      height: height,\n      width: width,\n      index: index,\n    };\n    tempArray.push(bar);\n  }\n\n  let partition = (array: BarProps[], left: number, right: number) => {\n    const pivot = array[Math.floor((right + left) / 2)].height;\n    let i = left;\n    let j = right;\n\n    while (i <= j) {\n      while (array[i].height < pivot) {\n        i++;\n      }\n\n      while (array[j].height > pivot) {\n        j--;\n      }\n\n      if (i <= j) {\n        [array[i], array[j]] = [array[j], array[i]];\n        i++;\n        j--;\n      }\n    }\n\n    return i;\n  };\n\n  let quickSort = useCallback(\n    (array: BarProps[], left: number, right: number) => {\n      let index;\n\n      if (array.length > 1) {\n        index = partition(array, left, right);\n\n        if (left < index - 1) {\n          quickSort(array, left, index - 1);\n        }\n\n        if (index < right) {\n          quickSort(array, index, right);\n        }\n        renders++;\n      }\n\n      return array;\n    },\n    [renders]\n  );\n\n  let bubbleSort = (inputArr: BarProps[]) => {\n    let len = inputArr.length;\n    for (let i = 0; i < len; i++) {\n      for (let j = 0; j < len - 1; j++) {\n        if (inputArr[j].height > inputArr[j + 1].height) {\n          let tmp = inputArr[j];\n          inputArr[j] = inputArr[j + 1];\n          inputArr[j + 1] = tmp;\n          renders++;\n        }\n      }\n    }\n    return inputArr;\n  };\n\n  let insertionSort = (inputArr: BarProps[]) => {\n    let length = inputArr.length;\n    for (let i = 1; i < length; i++) {\n      let key = inputArr[i].height;\n      let j = i - 1;\n      while (j >= 0 && inputArr[j].height > key) {\n        inputArr[j + 1].height = inputArr[j].height;\n        j = j - 1;\n        renders++;\n      }\n      inputArr[j + 1].height = key;\n    }\n    return inputArr;\n  };\n\n  switch (sortType) {\n    case \"\":\n      renderArray = tempArray;\n      break;\n    case \"Quick\":\n      renderArray = quickSort(tempArray, 0, num - 1);\n      break;\n    case \"Bubble\":\n      renderArray = bubbleSort(tempArray);\n      break;\n    case \"Insertion\":\n      renderArray = insertionSort(tempArray);\n      break;\n    case \"JS\":\n      renderArray = tempArray.sort((a, b) => {\n        renders++;\n        if (a.height >= b.height) return 0;\n        else if (b.height > a.height) return -1;\n        else return 1;\n      });\n      break;\n    default:\n      renderArray = tempArray;\n      break;\n  }\n\n  let Bar = ({ height, width, index }: BarProps) => (\n    <div\n      style={{\n        width: `${width * 12}vw`,\n        height: `${height}vh`,\n      }}\n      className={`flex-col bg-green-900 mr-1 px-1 text-center text-white`}\n      key={index}\n    >\n      <div id=\"index\">{index + 1}</div>\n      <div id=\"height\">{height}</div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-400\">\n      <header className=\"py-4 px-8 mb-8 bg-gray-500\">\n        <div className=\"flex flex-row justify-between\">\n          <div className=\"flex-col\">\n            <a href=\"/\">Home</a>\n          </div>\n          <div className=\"flex-col\">\n            <div className=\"flex flex-row space-x-4\">\n              <div className=\"px-1\">\n                <button\n                  className=\"border border-black active:bg-blue-500 rounded-2xl px-4\"\n                  onClick={() => setSortType(\"None\")}\n                >\n                  None\n                </button>\n              </div>\n              <div className=\"px-1\">\n                <button\n                  className=\"border border-black active:bg-blue-500 rounded-2xl px-4\"\n                  onClick={() => setSortType(\"Bubble\")}\n                >\n                  Bubble\n                </button>\n              </div>\n              <div className=\"px-1\">\n                <button\n                  className=\"border border-black active:bg-blue-500 rounded-2xl px-4\"\n                  onClick={() => setSortType(\"Insertion\")}\n                >\n                  Insertion\n                </button>\n              </div>\n              <div className=\"px-1\">\n                <button\n                  className=\"border border-black active:bg-blue-500 rounded-2xl px-4\"\n                  onClick={() => setSortType(\"Quick\")}\n                >\n                  Quick\n                </button>\n              </div>\n              <div className=\"px-1\">\n                <button\n                  className=\"border border-black active:bg-blue-500 rounded-2xl px-4\"\n                  onClick={() => setSortType(\"JS\")}\n                >\n                  JS\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n      <div className=\"container\">\n        <div className=\"flex-col py-4\">\n          <form onSubmit={(event) => event.preventDefault()}>\n            <label htmlFor=\"num\">\n              Bars:\n              <input\n                className=\"mx-2 px-4 bg-gray-300 rounded-lg\"\n                type=\"number\"\n                name=\"bars\"\n                id=\"bars\"\n                step={1}\n                value={num}\n                onChange={(event) => setNum(parseInt(event.target.value))}\n                min={10}\n                max={150}\n              />\n            </label>\n          </form>\n        </div>\n\n        <div className=\"flex flex-row justify-between\">{renderArray?.map((bar) => Bar(bar))}</div>\n        {sortType !== \"None\" && (\n          <p>\n            {sortType} Sort would take {renders} iterations to sort.\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./assets/main.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}