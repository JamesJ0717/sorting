{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","num","setNum","sortType","setSortType","Header","slider","onSubmit","event","preventDefault","htmlFor","className","type","name","id","value","onChange","parseInt","target","min","max","href","onClick","Cols","tempArray","index","bar","height","Math","floor","random","width","push","quickSort","useCallback","array","left","right","length","console","log","pivot","i","j","partition","map","Bar","inputArr","len","tmp","bubbleSort","key","insertionSort","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.296b50e0.chunk.js","sourcesContent":["import React, { useCallback, useState } from \"react\";\n\ntype BarProps = {\n  height: number;\n  width: number;\n  index: number;\n};\n\nfunction App() {\n  const [num, setNum] = useState(25);\n  const [sortType, setSortType] = useState(\"\");\n\n  const Header = () => {\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setNum(parseInt(event.target.value));\n    };\n    const slider = (\n      <form onSubmit={(event) => event.preventDefault()}>\n        <label htmlFor=\"num\">\n          Bars:\n          <input\n            className=\"mx-2 w-3/4\"\n            type=\"number\"\n            name=\"bars\"\n            id=\"bars\"\n            value={num}\n            onChange={handleChange}\n            min={10}\n            max={150}\n          />\n        </label>\n      </form>\n    );\n    return (\n      <header className=\"py-4 px-8 mb-8 bg-gray-500\">\n        <div className=\"flex flex-row justify-between\">\n          <div className=\"flex-col\">\n            <a href=\"/\">Home</a>\n          </div>\n          <div className=\"flex-col\">\n            <div className=\"flex flex-row space-x-4\">\n              <div className=\"px-1\">\n                <button\n                  className=\"border border-black active:bg-blue-500 rounded-2xl px-4\"\n                  onClick={() => setSortType(\"None\")}\n                >\n                  None\n                </button>\n              </div>\n              <div className=\"px-1\">\n                <button\n                  className=\"border border-black active:bg-blue-500 rounded-2xl px-4\"\n                  onClick={() => setSortType(\"Bubble\")}\n                >\n                  Bubble\n                </button>\n              </div>\n              <div className=\"px-1\">\n                <button\n                  className=\"border border-black active:bg-blue-500 rounded-2xl px-4\"\n                  onClick={() => setSortType(\"Insertion\")}\n                >\n                  Insertion\n                </button>\n              </div>\n              <div className=\"px-1\">\n                <button\n                  className=\"border border-black active:bg-blue-500 rounded-2xl px-4\"\n                  onClick={() => setSortType(\"Quick\")}\n                >\n                  Quick\n                </button>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex-col\">{slider}</div>\n          <div className=\"\">\n            <a href=\"/about\">About</a>\n          </div>\n        </div>\n      </header>\n    );\n  };\n\n  const Cols = (): JSX.Element => {\n    let tempArray: BarProps[] = [];\n    for (let index = 0; index < num; index++) {\n      let height = Math.floor(Math.random() * 80) + 1;\n      let width = num / 12;\n      let bar = {\n        height: height,\n        width: width,\n        index: index,\n      };\n      tempArray.push(bar);\n    }\n\n    let partition = (array: BarProps[], left: number, right: number) => {\n      console.log(array);\n      const pivot = array[Math.floor((right + left) / 2)].height;\n      let i = left;\n      let j = right;\n\n      while (i <= j) {\n        while (array[i].height < pivot) {\n          i++;\n        }\n\n        while (array[j].height > pivot) {\n          j--;\n        }\n\n        if (i <= j) {\n          [array[i], array[j]] = [array[j], array[i]];\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    };\n\n    let quickSort = useCallback((array: BarProps[], left: number, right: number) => {\n      let index;\n\n      if (array.length > 1) {\n        index = partition(array, left, right);\n\n        if (left < index - 1) {\n          quickSort(array, left, index - 1);\n        }\n\n        if (index < right) {\n          quickSort(array, index, right);\n        }\n      }\n\n      return array;\n    }, []);\n\n    let bubbleSort = (inputArr: BarProps[]) => {\n      console.log(inputArr);\n      let len = inputArr.length;\n      for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len - 1; j++) {\n          console.log(inputArr[j].height, inputArr[j + 1].height);\n          if (inputArr[j].height > inputArr[j + 1].height) {\n            let tmp = inputArr[j];\n            inputArr[j] = inputArr[j + 1];\n            inputArr[j + 1] = tmp;\n            console.log({ tmp });\n          }\n        }\n      }\n      return inputArr;\n    };\n\n    let insertionSort = (inputArr: BarProps[]) => {\n      let length = inputArr.length;\n      for (let i = 1; i < length; i++) {\n        let key = inputArr[i].height;\n        let j = i - 1;\n        while (j >= 0 && inputArr[j].height > key) {\n          inputArr[j + 1].height = inputArr[j].height;\n          j = j - 1;\n        }\n        inputArr[j + 1].height = key;\n      }\n      return inputArr;\n    };\n\n    switch (sortType) {\n      case \"\":\n        return <div className=\"flex flex-row justify-between\">{tempArray.map((bar) => Bar(bar))}</div>;\n      case \"Quick\":\n        return (\n          <div className=\"flex flex-row justify-between\">{quickSort(tempArray, 0, num - 1).map((bar) => Bar(bar))}</div>\n        );\n      case \"Bubble\":\n        return <div className=\"flex flex-row justify-between\">{bubbleSort(tempArray).map((bar) => Bar(bar))}</div>;\n      case \"Insertion\":\n        return <div className=\"flex flex-row justify-between\">{insertionSort(tempArray).map((bar) => Bar(bar))}</div>;\n      default:\n        return <div className=\"flex flex-row justify-between\">{tempArray.map((bar) => Bar(bar))}</div>;\n    }\n  };\n\n  const Bar = ({ height, width, index }: BarProps) => (\n    <div\n      style={{\n        width: `${width * 12}vw`,\n        height: `${height}vh`,\n      }}\n      className={`flex-col bg-green-900 border-green-900 mr-1 text-center text-white`}\n      key={index}\n    >\n      <div id=\"index\">{index}</div>\n      <div id=\"height\">{height}</div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-400\">\n      <Header />\n      <div className=\"container\">\n        <p className=\"\"></p>\n        <Cols />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./assets/main.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}